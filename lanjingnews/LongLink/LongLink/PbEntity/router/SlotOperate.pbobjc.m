// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/slot_operate.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "SlotOperate.pbobjc.h"
 #import "ErrCode.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SlotOperateRoot

@implementation SlotOperateRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SlotOperateRoot_FileDescriptor

static GPBFileDescriptor *SlotOperateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"im.router"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - SlotOperationRequest

@implementation SlotOperationRequest

@dynamic slotArray, slotArray_Count;
@dynamic hasOpType, opType;

typedef struct SlotOperationRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t opType;
  GPBUInt32Array *slotArray;
} SlotOperationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "slotArray",
        .dataTypeSpecific.className = NULL,
        .number = SlotOperationRequest_FieldNumber_SlotArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SlotOperationRequest__storage_, slotArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = SlotOperationRequest_FieldNumber_OpType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SlotOperationRequest__storage_, opType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SlotOperationRequest class]
                                     rootClass:[SlotOperateRoot class]
                                          file:SlotOperateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SlotOperationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SlotOperationResponse

@implementation SlotOperationResponse

@dynamic hasErrCode, errCode;
@dynamic slotArray, slotArray_Count;
@dynamic hasOpType, opType;

typedef struct SlotOperationResponse__storage_ {
  uint32_t _has_storage_[1];
  ErrCode errCode;
  int32_t opType;
  GPBUInt32Array *slotArray;
} SlotOperationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errCode",
        .dataTypeSpecific.enumDescFunc = ErrCode_EnumDescriptor,
        .number = SlotOperationResponse_FieldNumber_ErrCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SlotOperationResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "slotArray",
        .dataTypeSpecific.className = NULL,
        .number = SlotOperationResponse_FieldNumber_SlotArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SlotOperationResponse__storage_, slotArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "opType",
        .dataTypeSpecific.className = NULL,
        .number = SlotOperationResponse_FieldNumber_OpType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SlotOperationResponse__storage_, opType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SlotOperationResponse class]
                                     rootClass:[SlotOperateRoot class]
                                          file:SlotOperateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SlotOperationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
