// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/heartbeat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Heartbeat.pbobjc.h"
 #import "ErrCode.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HeartbeatRoot

@implementation HeartbeatRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - HeartbeatRoot_FileDescriptor

static GPBFileDescriptor *HeartbeatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"im.router"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - HeartbeatRequest

@implementation HeartbeatRequest

@dynamic hasConnNum, connNum;
@dynamic slotsArray, slotsArray_Count;
@dynamic hasHost, host;
@dynamic hasPort, port;

typedef struct HeartbeatRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t connNum;
  int32_t port;
  GPBUInt32Array *slotsArray;
  NSString *host;
} HeartbeatRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connNum",
        .dataTypeSpecific.className = NULL,
        .number = HeartbeatRequest_FieldNumber_ConnNum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeartbeatRequest__storage_, connNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "slotsArray",
        .dataTypeSpecific.className = NULL,
        .number = HeartbeatRequest_FieldNumber_SlotsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HeartbeatRequest__storage_, slotsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "host",
        .dataTypeSpecific.className = NULL,
        .number = HeartbeatRequest_FieldNumber_Host,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeartbeatRequest__storage_, host),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = HeartbeatRequest_FieldNumber_Port,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HeartbeatRequest__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartbeatRequest class]
                                     rootClass:[HeartbeatRoot class]
                                          file:HeartbeatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeartbeatRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HeartbeatResponse

@implementation HeartbeatResponse

@dynamic hasErrCode, errCode;

typedef struct HeartbeatResponse__storage_ {
  uint32_t _has_storage_[1];
  ErrCode errCode;
} HeartbeatResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errCode",
        .dataTypeSpecific.enumDescFunc = ErrCode_EnumDescriptor,
        .number = HeartbeatResponse_FieldNumber_ErrCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeartbeatResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartbeatResponse class]
                                     rootClass:[HeartbeatRoot class]
                                          file:HeartbeatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeartbeatResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
