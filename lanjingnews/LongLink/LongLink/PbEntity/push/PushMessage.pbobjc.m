// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push/push_message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PushMessage.pbobjc.h"
 #import "ErrCode.pbobjc.h"
 #import "Data.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PushMessageRoot

@implementation PushMessageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PushMessageRoot_FileDescriptor

static GPBFileDescriptor *PushMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"im.push"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - SendMessageRequest

@implementation SendMessageRequest

@dynamic connIdListArray, connIdListArray_Count;
@dynamic hasMid, mid;
@dynamic hasMsg, msg;
@dynamic hasIsBroadcast, isBroadcast;
@dynamic hasCacheType, cacheType;
@dynamic hasTimestamp, timestamp;

typedef struct SendMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t isBroadcast;
  uint32_t cacheType;
  GPBUInt64Array *connIdListArray;
  NotifyMessage *msg;
  uint64_t mid;
  int64_t timestamp;
} SendMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_ConnIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, connIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Mid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyMessage),
        .number = SendMessageRequest_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isBroadcast",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_IsBroadcast,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, isBroadcast),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cacheType",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_CacheType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, cacheType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Timestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageRequest class]
                                     rootClass:[PushMessageRoot class]
                                          file:PushMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageResponse

@implementation SendMessageResponse

@dynamic hasErrCode, errCode;

typedef struct SendMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  ErrCode errCode;
} SendMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errCode",
        .dataTypeSpecific.enumDescFunc = ErrCode_EnumDescriptor,
        .number = SendMessageResponse_FieldNumber_ErrCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageResponse class]
                                     rootClass:[PushMessageRoot class]
                                          file:PushMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
